<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>发布系统 on Potterhe&#39;s Site</title>
    <link>https://potterhe.github.io/tags/%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 发布系统 on Potterhe&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 14 Mar 2020 11:52:00 +0800</lastBuildDate>
    
	<atom:link href="https://potterhe.github.io/tags/%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>基于 Kubeapps 的应用管理、发布系统</title>
      <link>https://potterhe.github.io/posts/a-kubeapps-based-application-deploying-and-managing-system/</link>
      <pubDate>Sat, 14 Mar 2020 11:52:00 +0800</pubDate>
      
      <guid>https://potterhe.github.io/posts/a-kubeapps-based-application-deploying-and-managing-system/</guid>
      <description>在引入 Kubernetes 时，我们需要提供对应的 CI/CD 方案。
需求&amp;amp;痛点  私有的统一认证，授权。角色，权限管控。 审计合规。主要包括测试人员发版，发版有历史，可审计追溯。 多云，多集群。 功能产品化。如：发版，扩容，回滚，下线。 “回滚”机制要求“编排文件”也需要用版本控制工具管理起来，版本化。  选型  rancher drone spinnaker helm 生态  为什么选择 Kubeapps Kubeapps
在整理这篇的时候，特意确认了 kubeapps 的最新架构，一些组件的名字已经发生了改变。   需求描述中的“编排文件版本化”，这正是 helm 的特性，虽然社区有其它的解决方案，但 helm 目前仍是那个应用最广泛的，成熟且有丰富的生态。 kubeapps 基于 helm。 kubeapps 是产品化的，而不是一个“轮子”。 封装良好的 api，极容易复用和扩展。这些 api 包括：整合了chartmuseum，并提供了chartsvc；tiller-proxy api；apprepository api；搜索 api，基于mongo的缓存，定时同步。 权限透明。它的权限完全是基于 Kubernetes 的 RBAC 机制，是透明的。 前端 React。  chartmuseum chartmuseum 是 helm 的 charts 仓库。
 无状态 几乎支持所有云的对象存储作为后端，简单，安全。  由于我们的业务主要是在腾讯云，我们希望用其 cos 服务作为存储 backend。我们为社区提供了两个pr，完善了 chartmuseum 对腾讯云 cos 的支持。</description>
    </item>
    
  </channel>
</rss>